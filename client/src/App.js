import './normal.css';
import './App.css';
import { useState, useEffect } from 'react'
import ChatMessage from './components/ChatMessage'

function App() {

  useEffect(() => {
    getEngines();
  },[])

  const [input, setInput] = useState("")
  const [chatlog, setChatlog] = useState([{user:"gpt",message: "How can i help you today?"}])
  const [models, setModels] = useState([])
  const [currentModel, setCurrentModel] = useState("text-davinci-003")
  const temperatures = [0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1]
  const [currentTemperature, setCurrentTemperature] = useState(0.7)
  const tokens = [5,10,50,100,200,300,400,500,1000,2000]
  const [currentToken, setCurrentToken] = useState(100)
  const [isChecked, setIsChecked] = useState(false)

  useEffect(() => {
    scrollToEnd()
  },[chatlog])

  
  function scrollToEnd(){
    let el = document.querySelector(".chat-log");
    let elem = el.lastElementChild;
    elem.scrollIntoView();
  }
  
  function clearChat(){
    setChatlog([{user:"gpt",message: "Need any help! I can help, type it below."}]);
  }

  function checkUncheck(){
    setIsChecked(prev => !prev);
  }
  
  function getEngines() {
    fetch("https://react-chatgpt-server.vercel.app/models")
    .then(res => res.json())
    .then(data => {
      setModels(data.models)
    })
  }

  async function handleSubmit(e){
    e.preventDefault();
    let chatlogNew = [...chatlog, {user: "me", message: `${input}`}]
    setInput("");
    setChatlog(chatlogNew);
    const messages = chatlogNew.map((message) => message.message)
    const response = await fetch("https://gpt-chatbot-server.vercel.app/", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        message: messages,
        currentModel,
        currentTemperature,
        currentToken,
      })
    });
    const data = await response.json();
    console.log(data.message.replace('/n'));
    setChatlog([...chatlogNew, {user: "gpt", message: `${data.message.replace('/n')}`}])
    
  }

  return (
    <div className="App">
      <aside className="side-menu">
        <div className="new-chat-btn" onClick={clearChat}>
          Clear Chat
        </div>
        <div className="models">
          <label for="#models">Select AI Model</label>
          <select id="models" value={currentModel} onChange={(e) => {
            setCurrentModel(e.target.value)
          }}>
            {models ? models.map((model, index) => (
              <option key={model.id} value={model.id}>{model.id}</option>
            )) : <></>}
          </select>
        </div>
        <div className="temperature">
          <label for="#temperature">Temperature</label>
          <select id="temperature" value={currentTemperature} onChange={(e) => {
            setCurrentTemperature(e.target.value)
          }}>
            {temperatures.map(temp => (
              <option key={temp} value={temp}>{temp}</option>
            ))}
          </select>
        </div>
        <div className="token">
          <label for="token">Token</label>
          <select id="token" value={currentToken} onChange={(e) => {
            setCurrentToken(e.target.value)
          }}>
            {tokens.map(token => (
              <option key={token} value={token}>{token}</option>
            ))}
          </select>
        </div>
        <div className="user-guide">
          <ul>
            <li>Select different models for different tasks.Know more about models <a href="https://beta.openai.com/docs/models">here</a>.</li>
            <li>Set temperature to higher value if you want to increase the randomness of response generated by AI.</li>
            <li>Token sets the max length for the response that is to be generated by AI.</li>
          </ul>
        </div>
        <div class="format-checkbox">
          <span>Check this if you want text to be unformated</span>
          <label class="switch" for="checkbox">
            <input type="checkbox" onChange={checkUncheck} name="text-format" id="checkbox" />
            <div class="slider round"></div>
          </label>
        </div>
      </aside>
      <section className="chat-area">
        <div className="chat-log">
          {chatlog.map((message, index) => (
            <ChatMessage key={index} message={message} textFormat={isChecked}/>
          ))}
        </div>
        <div className="chat-input-holder">
          <form onSubmit={handleSubmit}>
            <input
            className="chat-input-box" 
            rows="1"
            value={input}
            onChange={(e) => setInput(e.target.value)}></input>
          </form>
        </div>
      </section>
    </div>
  );
}

export default App;
